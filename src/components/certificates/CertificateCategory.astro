---
import { ChevronDown } from "lucide-astro";
import CertificateCard from "./CertificateCard.astro";
import { getCategoryStats } from "@/data/certificates";
import type { CertificateCategory } from "@/data/certificates";

interface Props {
  category: CertificateCategory;
  index: number;
}

const { category, index } = Astro.props;
const stats = getCategoryStats(category);
const progressBarColorFrom = category.color.primary.replace('text-', 'from-').replace('dark:text-', 'dark:from-');
const progressBarColorTo = category.color.secondary.replace('text-', 'to-').replace('dark:text-', 'dark:to-');
const validPercentage = Math.round((stats.validCertificates / stats.total) * 100);
---

<div>
  <div class={`${category.color.bg} rounded-2xl border ${category.color.border} overflow-hidden transition-all duration-300 hover:shadow-lg hover:-translate-y-1`}>
    <!-- Header -->
    <div class="p-6 border-b border-current/10">
      <div class="flex items-center justify-between mb-4">
        <div class="flex items-center gap-3">
          <div class={`p-2 bg-white/50 dark:bg-black/20 rounded-lg`}>
            {typeof category.icon === 'string'
            ? category.icon.includes('.svg') ? (
              <img
                src={category.icon}
                alt={`${category.name} icon`}
                class={`w-6 h-6 ${category.color.primary}`}
              />
           ) : (
              <div class={`w-6 h-6 ${category.color.primary}`}>
                <!-- Fallback icon placeholder -->
                <svg viewBox="0 0 24 24" fill="currentColor">
                  <circle cx="12" cy="12" r="10"/>
                </svg>
              </div>
            ) : (
              <category.icon class={`w-6 h-6 ${category.color.primary}`} />
            )}
          </div>
          <div>
            <h3 class={`font-bold text-lg ${category.color.primary}`}>
              {category.name}
            </h3>
            <p class="text-sm text-zinc-600 dark:text-zinc-400">
              {stats.validCertificates} de {stats.total} vigentes
            </p>
          </div>
        </div>

        <div class="text-right">
          <div class={`text-2xl font-bold ${category.color.primary}`}>
            {stats.total}
          </div>
          <div class="text-sm text-zinc-500 dark:text-zinc-400">
            certificados
          </div>
        </div>
      </div>

      <!-- Progress Bar -->
      <div class="space-y-2">
        <div class="w-full bg-white/50 dark:bg-black/20 rounded-full h-2">
          <div
            class={`bg-gradient-to-r h-2 rounded-full transition-all duration-1000 ease-out ${progressBarColorFrom} ${progressBarColorTo}`}
            style={`width: ${validPercentage}%`}
          ></div>
        </div>

        <div class="flex justify-between text-xs text-zinc-600 dark:text-zinc-400">
          <span>{stats.lifetime} permanentes</span>
          <span>{stats.active} vigentes</span>
          <span>{stats.expired} expirados</span>
        </div>
      </div>

      <!-- Quick Stats -->
      <div class="mt-4 grid grid-cols-3 gap-4">
        <div class="text-center">
          <div class={`text-lg font-bold ${category.color.primary}`}>
            {stats.lifetime}
          </div>
          <div class="text-xs text-zinc-500 dark:text-zinc-400">
            Permanentes
          </div>
        </div>
        <div class="text-center">
          <div class={`text-lg font-bold ${category.color.primary}`}>
            {stats.active}
          </div>
          <div class="text-xs text-zinc-500 dark:text-zinc-400">
            Con expiraci√≥n
          </div>
        </div>
        <div class="text-center">
          <div class={`text-lg font-bold ${stats.expired > 0 ? 'text-red-500 dark:text-red-400' : category.color.primary}`}>
            {stats.expired}
          </div>
          <div class="text-xs text-zinc-500 dark:text-zinc-400">
            Expirados
          </div>
        </div>
      </div>
    </div>

    <!-- Certificates List -->
    <div class="p-6">
      <!-- Toggle Button -->
      <button
        class={`w-full flex items-center justify-between p-3 rounded-lg bg-white/50 dark:bg-black/20 hover:bg-white/70 dark:hover:bg-black/30 transition-colors mb-4 certificate-toggle`}
        data-category={`category-${index}`}
        aria-expanded="false"
        aria-controls={`certificates-${index}`}
      >
        <span class={`font-medium ${category.color.primary}`}>
          Ver Certificados ({category.certificates.length})
        </span>
        <ChevronDown class={`w-5 h-5 ${category.color.primary} transition-transform duration-300 toggle-icon`} />
      </button>

      <!-- Certificates Grid -->
      <div
        id={`certificates-${index}`}
        class="certificates-container max-h-0 overflow-hidden transition-all duration-500 ease-in-out"
      >
        <div class="grid grid-cols-1 gap-6 pt-2">
          {category.certificates.map((certificate) => (
            <CertificateCard
              certificate={certificate}
              categoryColor={category.color}
            />
          ))}
        </div>
      </div>
    </div>
  </div>
</div>

<script lang="js">
  class CertificateToggle {
    constructor() {
      this.init();
    }

    init() {
      const toggleButtons = document.querySelectorAll('.certificate-toggle');

      toggleButtons.forEach(button => {
        button.addEventListener('click', (e) => {
          e.preventDefault();
          this.toggleCertificates(button);
        });
      });
    }

    toggleCertificates(button) {
      const categoryId = button.dataset.category;
      const certificatesContainer = button.nextElementSibling;
      const icon = button.querySelector('.toggle-icon');
      const isExpanded = button.getAttribute('aria-expanded') === 'true';

      if (isExpanded) {
        // Collapse
        certificatesContainer.style.maxHeight = '0px';
        icon.style.transform = 'rotate(0deg)';
        button.setAttribute('aria-expanded', 'false');
      } else {
        // Expand
        const scrollHeight = certificatesContainer.scrollHeight;
        certificatesContainer.style.maxHeight = `${scrollHeight}px`;
        icon.style.transform = 'rotate(180deg)';
        button.setAttribute('aria-expanded', 'true');
      }
    }
  }

  // Initialize certificate toggles
  function initCertificateToggles() {
    if (!window.certificateToggleInstance) {
      window.certificateToggleInstance = new CertificateToggle();
    }
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initCertificateToggles);
  } else {
    initCertificateToggles();
  }

  // Re-initialize on page changes (for Astro)
  document.addEventListener('astro:page-load', initCertificateToggles);
</script>