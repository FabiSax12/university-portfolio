---
import { Calendar, ExternalLink, Shield, Clock, AlertTriangle, Star } from "lucide-astro";
import type { Certificate } from "@/data/certificates";
import { formatDate, isExpiringSoon } from "@/data/certificates";

interface Props {
  certificate: Certificate;
  categoryColor: {
    primary: string;
    secondary: string;
    bg: string;
    border: string;
    accent: string;
  };
}

const { certificate, categoryColor } = Astro.props;

const getStatusIcon = (status: string, expiryDate?: string) => {
  if (status === 'expired') return AlertTriangle;
  if (status === 'lifetime') return Shield;
  if (expiryDate && isExpiringSoon(expiryDate)) return Clock;
  return Shield;
};

const getStatusColor = (status: string, expiryDate?: string) => {
  if (status === 'expired') return "text-red-500 dark:text-red-400";
  if (status === 'lifetime') return "text-green-500 dark:text-green-400";
  if (expiryDate && isExpiringSoon(expiryDate)) return "text-amber-500 dark:text-amber-400";
  return "text-blue-500 dark:text-blue-400";
};

const getStatusBg = (status: string, expiryDate?: string) => {
  if (status === 'expired') return "bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-700";
  if (status === 'lifetime') return "bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-700";
  if (expiryDate && isExpiringSoon(expiryDate)) return "bg-amber-50 dark:bg-amber-900/20 border-amber-200 dark:border-amber-700";
  return "bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-700";
};

const getStatusText = (status: string, expiryDate?: string) => {
  if (status === 'expired') return "Expirado";
  if (status === 'lifetime') return "Permanente";
  if (expiryDate && isExpiringSoon(expiryDate)) return "Por vencer";
  return "Vigente";
};

const getLevelIcon = (level: string) => {
  switch (level) {
    case 'expert': return "🏆";
    case 'advanced': return "⭐";
    case 'intermediate': return "📚";
    default: return "🌱";
  }
};

const getLevelColor = (level: string) => {
  switch (level) {
    case 'expert': return "bg-purple-100 dark:bg-purple-900/30 text-purple-700 dark:text-purple-300";
    case 'advanced': return "bg-orange-100 dark:bg-orange-900/30 text-orange-700 dark:text-orange-300";
    case 'intermediate': return "bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300";
    default: return "bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300";
  }
};

const StatusIcon = getStatusIcon(certificate.status, certificate.expiryDate);
---

<div
  class={`${getStatusBg(certificate.status, certificate.expiryDate)} rounded-2xl border transition-all duration-300 hover:shadow-lg hover:-translate-y-1 group overflow-hidden`}
>
  <!-- Certificate Header -->
  <div class="p-6 border-b border-current/10">
    <div class="flex items-start justify-between gap-4">
      <div class="flex-1 min-w-0">
        <div class="flex items-center gap-2 mb-2">
          <h4
            class="font-bold text-lg text-zinc-900 dark:text-white group-hover:text-violet-600 dark:group-hover:text-violet-400 transition-colors leading-tight"
          >
            {certificate.name}
          </h4>
          <span class="text-lg">{getLevelIcon(certificate.level)}</span>
        </div>

        <div class="flex items-center gap-2 mb-3">
          <span class="font-medium text-zinc-700 dark:text-zinc-300">
            {certificate.issuer}
          </span>
          <span class={`text-xs px-2 py-1 rounded-full font-medium ${getLevelColor(certificate.level)}`}>
            {certificate.level}
          </span>
        </div>

        <p class="text-sm text-zinc-600 dark:text-zinc-400 leading-relaxed mb-4">
          {certificate.description}
        </p>

        <!-- Date Information -->
        <div class="flex flex-col sm:flex-row sm:items-center gap-2 text-sm text-zinc-500 dark:text-zinc-400">
          <div class="flex items-center gap-1">
            <Calendar class="w-4 h-4" />
            <span>Emitido: {formatDate(certificate.issueDate)}</span>
          </div>
          {certificate.expiryDate && (
            <div class="flex items-center gap-1">
              <Clock class="w-4 h-4" />
              <span class={isExpiringSoon(certificate.expiryDate) ? "text-amber-600 dark:text-amber-400 font-medium" : ""}>
                Expira: {formatDate(certificate.expiryDate)}
              </span>
            </div>
          )}
        </div>
      </div>

      <!-- Status Badge -->
      <div class="flex flex-col items-end gap-2">
        <div class="flex items-center gap-1">
          <StatusIcon class={`w-5 h-5 ${getStatusColor(certificate.status, certificate.expiryDate)}`} />
          <span
            class={`text-xs px-2 py-1 rounded-full font-medium ${
              certificate.status === "expired"
                ? "bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-300"
                : certificate.status === "lifetime"
                  ? "bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300"
                  : certificate.expiryDate && isExpiringSoon(certificate.expiryDate)
                    ? "bg-amber-100 dark:bg-amber-900/30 text-amber-700 dark:text-amber-300"
                    : "bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300"
            }`}
          >
            {getStatusText(certificate.status, certificate.expiryDate)}
          </span>
        </div>

        {certificate.credentialUrl && (
          <a
            href={certificate.credentialUrl}
            target="_blank"
            rel="noopener noreferrer"
            class="flex items-center gap-1 text-xs text-violet-600 dark:text-violet-400 hover:text-violet-700 dark:hover:text-violet-300 transition-colors"
            aria-label="Ver certificado"
          >
            <ExternalLink class="w-3 h-3" />
            <span>Ver certificado</span>
          </a>
        )}
      </div>
    </div>
  </div>

  <!-- Skills Section -->
  <div class="p-6">
    <div class="mb-3">
      <h5 class="font-semibold text-sm text-zinc-900 dark:text-white mb-2">
        Habilidades certificadas
      </h5>
    </div>

    <div class="flex flex-wrap gap-2">
      {certificate.skills.map((skill) => (
        <span
          class={`inline-block px-3 py-1 bg-white/70 dark:bg-black/20 text-xs font-medium rounded-full border border-current/20 ${categoryColor.primary} transition-all duration-200 hover:scale-105`}
        >
          {skill}
        </span>
      ))}
    </div>

    {certificate.credentialId && (
      <div class="mt-4 pt-4 border-t border-current/10">
        <div class="text-xs text-zinc-500 dark:text-zinc-400">
          <span class="font-medium">ID de credencial:</span>
          <code class="ml-1 px-2 py-1 bg-zinc-100 dark:bg-zinc-800 rounded font-mono">
            {certificate.credentialId}
          </code>
        </div>
      </div>
    )}
  </div>
</div>