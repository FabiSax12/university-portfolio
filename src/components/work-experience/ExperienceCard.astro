---
import { 
  MapPin, 
  Calendar, 
  Building, 
  Users, 
  ExternalLink, 
  Award,
  Lightbulb,
  TrendingUp,
  ChevronDown,
  Mail,
  Linkedin,
  Code,
  Brain
} from "lucide-astro";
import type { WorkExperience } from "@/data/work-experience";
import { formatDateRange, calculateDuration } from "@/data/work-experience";

interface Props {
  experience: WorkExperience;
  index: number;
}

const { experience, index } = Astro.props;

const getTypeColor = (type: WorkExperience['type']) => {
  switch (type) {
    case 'full-time': return "bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300";
    case 'part-time': return "bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300";
    case 'internship': return "bg-violet-100 dark:bg-violet-900/30 text-violet-700 dark:text-violet-300";
    case 'freelance': return "bg-orange-100 dark:bg-orange-900/30 text-orange-700 dark:text-orange-300";
    case 'contract': return "bg-cyan-100 dark:bg-cyan-900/30 text-cyan-700 dark:text-cyan-300";
    case 'volunteer': return "bg-pink-100 dark:bg-pink-900/30 text-pink-700 dark:text-pink-300";
    default: return "bg-zinc-100 dark:bg-zinc-900/30 text-zinc-700 dark:text-zinc-300";
  }
};

const getTypeLabel = (type: WorkExperience['type']) => {
  const labels = {
    'full-time': 'Tiempo Completo',
    'part-time': 'Tiempo Parcial',
    'internship': 'Práctica',
    'freelance': 'Freelance',
    'contract': 'Contrato',
    'volunteer': 'Voluntario'
  };
  return labels[type] || type;
};

const getModeIcon = (mode: WorkExperience['mode']) => {
  switch (mode) {
    case 'remote': return "🏠";
    case 'hybrid': return "🔄";
    case 'on-site': return "🏢";
    default: return "📍";
  }
};

const getModeLabel = (mode: WorkExperience['mode']) => {
  const labels = {
    'remote': 'Remoto',
    'hybrid': 'Híbrido',
    'on-site': 'Presencial'
  };
  return labels[mode] || mode;
};
---

<div class="bg-white dark:bg-zinc-800/50 rounded-2xl border border-zinc-200 dark:border-zinc-700 overflow-hidden transition-all duration-300 hover:shadow-lg hover:-translate-y-1 group">
  <!-- Header -->
  <div class="p-6 border-b border-zinc-200 dark:border-zinc-700">
    <div class="flex items-start justify-between gap-4">
      <div class="flex-1 min-w-0">
        <!-- Company & Position -->
        <div class="flex items-center gap-3 mb-2">
          {experience.companyInfo.logo && (
            <img
              src={experience.companyInfo.logo}
              alt={`${experience.company} logo`}
              class="w-12 h-12 rounded-lg object-cover border border-zinc-200 dark:border-zinc-700"
            />
          )}
          <div class="flex-1 min-w-0">
            <h3 class="font-bold text-xl text-zinc-900 dark:text-white group-hover:text-violet-600 dark:group-hover:text-violet-400 transition-colors leading-tight">
              {experience.position}
            </h3>
            <div class="flex items-center gap-2 text-lg text-zinc-700 dark:text-zinc-300">
              <Building class="w-4 h-4" />
              <span class="font-medium">{experience.company}</span>
              {experience.companyInfo.website && (
                <a
                  href={experience.companyInfo.website}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="text-violet-600 dark:text-violet-400 hover:text-violet-700 dark:hover:text-violet-300"
                  aria-label="Sitio web de la empresa"
                >
                  <ExternalLink class="w-4 h-4" />
                </a>
              )}
            </div>
            {experience.department && (
              <p class="text-sm text-zinc-600 dark:text-zinc-400 mt-1">
                {experience.department}
              </p>
            )}
          </div>
        </div>

        <!-- Meta Information -->
        <div class="flex flex-wrap gap-4 mb-4">
          <div class="flex items-center gap-1 text-sm text-zinc-600 dark:text-zinc-400">
            <Calendar class="w-4 h-4" />
            <span>{formatDateRange(experience.startDate, experience.endDate)}</span>
            <span class="text-zinc-400 dark:text-zinc-500">•</span>
            <span class="font-medium">{calculateDuration(experience.startDate, experience.endDate)}</span>
          </div>

          <div class="flex items-center gap-1 text-sm text-zinc-600 dark:text-zinc-400">
            <MapPin class="w-4 h-4" />
            <span>{experience.location}</span>
            <span class="ml-1">{getModeIcon(experience.mode)}</span>
            <span>{getModeLabel(experience.mode)}</span>
          </div>

          <div class="flex items-center gap-1 text-sm text-zinc-600 dark:text-zinc-400">
            <Users class="w-4 h-4" />
            <span>{experience.companyInfo.size}</span>
            <span class="text-zinc-400 dark:text-zinc-500">•</span>
            <span>{experience.companyInfo.industry}</span>
          </div>
        </div>

        <!-- Tags -->
        <div class="flex flex-wrap gap-2">
          <span class={`text-xs px-3 py-1 rounded-full font-medium ${getTypeColor(experience.type)}`}>
            {getTypeLabel(experience.type)}
          </span>
          {!experience.endDate && (
            <span class="text-xs px-3 py-1 rounded-full font-medium bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300 animate-pulse">
              🟢 Actual
            </span>
          )}
        </div>
      </div>
    </div>

    <!-- Description -->
    <div class="mt-4">
      <p class="text-zinc-600 dark:text-zinc-400 leading-relaxed">
        {experience.description}
      </p>
    </div>

    <!-- Tech Connection (if exists) -->
    {experience.techConnection && (
      <div class="mt-4 p-4 bg-violet-50 dark:bg-violet-900/20 rounded-lg border border-violet-200 dark:border-violet-700">
        <div class="flex items-start gap-2">
          <Lightbulb class="w-5 h-5 text-violet-600 dark:text-violet-400 mt-0.5 flex-shrink-0" />
          <div>
            <h4 class="font-semibold text-violet-900 dark:text-violet-100 mb-1">
              Conexión con Tech
            </h4>
            <p class="text-sm text-violet-700 dark:text-violet-300 leading-relaxed">
              {experience.techConnection}
            </p>
          </div>
        </div>
      </div>
    )}
  </div>

  <!-- Expandable Content -->
  <div class="p-6">
    <!-- Toggle Button -->
    <button
      class="w-full flex items-center justify-between p-3 rounded-lg bg-zinc-50 dark:bg-zinc-800/50 hover:bg-zinc-100 dark:hover:bg-zinc-700/50 transition-colors mb-4 experience-toggle"
      data-experience={`experience-${index}`}
      aria-expanded="false"
      aria-controls={`experience-details-${index}`}
    >
      <span class="font-medium text-zinc-900 dark:text-white">
        Ver detalles completos
      </span>
      <ChevronDown class="w-5 h-5 text-zinc-600 dark:text-zinc-400 transition-transform duration-300 toggle-icon" />
    </button>

    <!-- Expandable Details -->
    <div
      id={`experience-details-${index}`}
      class="experience-details max-h-0 overflow-hidden transition-all duration-500 ease-in-out"
    >
      <div class="space-y-6 pt-2">
        <!-- Key Achievements -->
        <div>
          <div class="flex items-center gap-2 mb-3">
            <Award class="w-5 h-5 text-green-600 dark:text-green-400" />
            <h4 class="font-semibold text-zinc-900 dark:text-white">
              Logros Principales
            </h4>
          </div>
          <ul class="space-y-2">
            {experience.achievements.map((achievement) => (
              <li class="flex items-start gap-2 text-sm text-zinc-600 dark:text-zinc-400">
                <span class="text-green-500 dark:text-green-400 mt-1 flex-shrink-0">✓</span>
                <span class="leading-relaxed">{achievement}</span>
              </li>
            ))}
          </ul>
        </div>

        <!-- Responsibilities -->
        <div>
          <div class="flex items-center gap-2 mb-3">
            <Users class="w-5 h-5 text-blue-600 dark:text-blue-400" />
            <h4 class="font-semibold text-zinc-900 dark:text-white">
              Responsabilidades
            </h4>
          </div>
          <ul class="space-y-2">
            {experience.responsibilities.map((responsibility) => (
              <li class="flex items-start gap-2 text-sm text-zinc-600 dark:text-zinc-400">
                <span class="text-blue-500 dark:text-blue-400 mt-1 flex-shrink-0">•</span>
                <span class="leading-relaxed">{responsibility}</span>
              </li>
            ))}
          </ul>
        </div>

        <!-- Metrics (if available) -->
        {experience.metrics && experience.metrics.length > 0 && (
          <div>
            <div class="flex items-center gap-2 mb-3">
              <TrendingUp class="w-5 h-5 text-violet-600 dark:text-violet-400" />
              <h4 class="font-semibold text-zinc-900 dark:text-white">
                Impacto Medible
              </h4>
            </div>
            <div class="grid grid-cols-1 sm:grid-cols-3 gap-4">
              {experience.metrics.map((metric) => (
                <div class="bg-zinc-50 dark:bg-zinc-800/50 rounded-lg p-3 text-center">
                  <div class="text-lg font-bold text-violet-600 dark:text-violet-400">
                    {metric.value}
                  </div>
                  <div class="text-sm font-medium text-zinc-900 dark:text-white">
                    {metric.label}
                  </div>
                  {metric.description && (
                    <div class="text-xs text-zinc-600 dark:text-zinc-400 mt-1">
                      {metric.description}
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}

        <!-- Skills & Technologies -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <!-- Skills -->
          <div>
            <div class="flex items-center gap-2 mb-3">
              <Brain class="w-5 h-5 text-amber-600 dark:text-amber-400" />
              <h4 class="font-semibold text-zinc-900 dark:text-white">
                Habilidades Desarrolladas
              </h4>
            </div>
            <div class="flex flex-wrap gap-2">
              {experience.skills.map((skill) => (
                <span class="inline-block px-3 py-1 bg-amber-50 dark:bg-amber-900/20 text-amber-700 dark:text-amber-300 text-xs font-medium rounded-full border border-amber-200 dark:border-amber-700">
                  {skill}
                </span>
              ))}
            </div>
          </div>

          <!-- Technologies (if used) -->
          {experience.techUsed && experience.techUsed.length > 0 && (
            <div>
              <div class="flex items-center gap-2 mb-3">
                <Code class="w-5 h-5 text-blue-600 dark:text-blue-400" />
                <h4 class="font-semibold text-zinc-900 dark:text-white">
                  Tecnologías Utilizadas
                </h4>
              </div>
              <div class="flex flex-wrap gap-2">
                {experience.techUsed.map((tech) => (
                  <span class="inline-block px-3 py-1 bg-blue-50 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300 text-xs font-medium rounded-full border border-blue-200 dark:border-blue-700">
                    {tech}
                  </span>
                ))}
              </div>
            </div>
          )}
        </div>

        <!-- Key Learnings -->
        <div>
          <div class="flex items-center gap-2 mb-3">
            <Lightbulb class="w-5 h-5 text-violet-600 dark:text-violet-400" />
            <h4 class="font-semibold text-zinc-900 dark:text-white">
              Aprendizajes Clave
            </h4>
          </div>
          <ul class="space-y-2">
            {experience.learnings.map((learning) => (
              <li class="flex items-start gap-2 text-sm text-zinc-600 dark:text-zinc-400">
                <span class="text-violet-500 dark:text-violet-400 mt-1 flex-shrink-0">💡</span>
                <span class="leading-relaxed">{learning}</span>
              </li>
            ))}
          </ul>
        </div>

        <!-- References (if available) -->
        {experience.references && experience.references.length > 0 && (
          <div>
            <div class="flex items-center gap-2 mb-3">
              <Users class="w-5 h-5 text-green-600 dark:text-green-400" />
              <h4 class="font-semibold text-zinc-900 dark:text-white">
                Referencias
              </h4>
            </div>
            <div class="space-y-3">
              {experience.references.map((reference) => (
                <div class="bg-zinc-50 dark:bg-zinc-800/50 rounded-lg p-4">
                  <div class="flex items-center justify-between">
                    <div>
                      <div class="font-medium text-zinc-900 dark:text-white">
                        {reference.name}
                      </div>
                      <div class="text-sm text-zinc-600 dark:text-zinc-400">
                        {reference.position}
                      </div>
                    </div>
                    {reference.contact && (
                      <div class="flex items-center gap-2">
                        {reference.contact.includes('@') ? (
                          <a
                            href={`mailto:${reference.contact}`}
                            class="text-violet-600 dark:text-violet-400 hover:text-violet-700 dark:hover:text-violet-300"
                            aria-label="Enviar email"
                          >
                            <Mail class="w-4 h-4" />
                          </a>
                        ) : reference.contact.includes('linkedin') ? (
                          <a
                            href={reference.contact}
                            target="_blank"
                            rel="noopener noreferrer"
                            class="text-violet-600 dark:text-violet-400 hover:text-violet-700 dark:hover:text-violet-300"
                            aria-label="Ver LinkedIn"
                          >
                            <Linkedin class="w-4 h-4" />
                          </a>
                        ) : (
                          <span class="text-sm text-zinc-500 dark:text-zinc-400">
                            {reference.contact}
                          </span>
                        )}
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  </div>
</div>

<script lang="js">
  class ExperienceToggle {
    constructor() {
      this.init();
    }

    init() {
      const toggleButtons = document.querySelectorAll('.experience-toggle');

      toggleButtons.forEach(button => {
        button.addEventListener('click', (e) => {
          e.preventDefault();
          this.toggleExperience(button);
        });
      });
    }

    toggleExperience(button) {
      const experienceId = button.dataset.experience;
      const detailsContainer = button.nextElementSibling;
      const icon = button.querySelector('.toggle-icon');
      const isExpanded = button.getAttribute('aria-expanded') === 'true';

      if (isExpanded) {
        // Collapse
        detailsContainer.style.maxHeight = '0px';
        icon.style.transform = 'rotate(0deg)';
        button.setAttribute('aria-expanded', 'false');
        button.querySelector('span').textContent = 'Ver detalles completos';
      } else {
        // Expand
        const scrollHeight = detailsContainer.scrollHeight;
        detailsContainer.style.maxHeight = `${scrollHeight}px`;
        icon.style.transform = 'rotate(180deg)';
        button.setAttribute('aria-expanded', 'true');
        button.querySelector('span').textContent = 'Ocultar detalles';
      }
    }
  }

  // Initialize experience toggles
  function initExperienceToggles() {
    if (!window.experienceToggleInstance) {
      window.experienceToggleInstance = new ExperienceToggle();
    }
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initExperienceToggles);
  } else {
    initExperienceToggles();
  }

  // Re-initialize on page changes (for Astro)
  document.addEventListener('astro:page-load', initExperienceToggles);
</script>