---
import {
  Github,
  ExternalLink,
  FileText,
  Users,
  Calendar,
  Zap,
  CheckCircle,
  Clock,
  Target,
  Bomb,
  Lightbulb,
  Goal,
  Flag,
  Hammer,
  Star,
  Stars,
} from "lucide-astro";
import Link from "@/components/ui/Link.astro";
import type { Project } from "@/data/projects";
import { ChartNoAxesCombinedIcon, Flame } from "lucide-react";

interface Props {
  project: Project;
  featured?: boolean;
}

const { project, featured = false } = Astro.props;

const getStatusIcon = (status: string) => {
  switch (status) {
    case "completed":
      return CheckCircle;
    case "in-progress":
      return Clock;
    default:
      return Target;
  }
};

const getStatusColor = (status: string) => {
  switch (status) {
    case "completed":
      return "text-green-500 dark:text-green-400";
    case "in-progress":
      return "text-blue-500 dark:text-blue-400";
    default:
      return "text-orange-500 dark:text-orange-400";
  }
};

const getStatusText = (status: string) => {
  switch (status) {
    case "completed":
      return "Completado";
    case "in-progress":
      return "En desarrollo";
    default:
      return "Planeando";
  }
};

const StatusIcon = getStatusIcon(project.status);

const getLinkIcon = (type: string) => {
  switch (type) {
    case "github":
      return Github;
    case "docs":
      return FileText;
    default:
      return ExternalLink;
  }
};

const formatDate = (dateString: string) => {
  const date = new Date(dateString);
  return date.toLocaleDateString("es-ES", { year: "numeric", month: "short" });
};
---

<article
  class={`group relative bg-white dark:bg-zinc-800/50 rounded-2xl border border-zinc-200 dark:border-zinc-700 overflow-hidden transition-all duration-500 hover:shadow-2xl hover:shadow-violet-500/10 hover:-translate-y-2 hover:border-violet-300 dark:hover:border-violet-600 ${
    featured ? "lg:col-span-2" : ""
  }`}
>
  <!-- Project Image -->
  <div
    class="relative overflow-hidden aspect-video bg-gradient-to-br from-violet-50 to-zinc-50 dark:from-violet-900/20 dark:to-zinc-900"
  >
    <div
      class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent z-10"
    >
    </div>

    <!-- Placeholder for project image -->
    {
      project.image ? (
        <img
          src={project.image}
          alt={`${project.title} screenshot`}
          class={`w-full h-full transition-transform duration-500 group-hover:scale-105 ${featured ? "mt-16 p-4" : ""}`}
        />
      ) : (
        <div class="w-full h-full flex items-center justify-center bg-gradient-to-br from-violet-100 to-zinc-100 dark:from-violet-900/30 dark:to-zinc-800">
          <div class="text-center space-y-4">
            <div class="w-20 h-20 mx-auto bg-violet-200 dark:bg-violet-700 rounded-full flex items-center justify-center">
              <Zap class="w-10 h-10 text-violet-600 dark:text-violet-400" />
            </div>
            <p class="text-sm text-zinc-600 dark:text-zinc-400">
              Vista previa del proyecto
            </p>
          </div>
        </div>
      )
    }

    <!-- Status Badge -->
    <div class="absolute top-4 left-4 z-20">
      <div
        class={`flex items-center gap-2 px-3 py-1.5 rounded-full bg-white/90 dark:bg-zinc-800/90 backdrop-blur-sm border border-white/20 dark:border-zinc-700/50`}
      >
        <StatusIcon class={`w-4 h-4 ${getStatusColor(project.status)}`} />
        <span class="text-sm font-medium text-zinc-800 dark:text-zinc-200">
          {getStatusText(project.status)}
        </span>
      </div>
    </div>

    <!-- Priority Badge (only for featured) -->
    {
      featured && (
        <div class="absolute top-4 right-4 z-20">
          <div class="px-3 py-1.5 rounded-full bg-violet-600 text-white text-sm font-medium">
            ⭐ Destacado
          </div>
        </div>
      )
    }
  </div>

  <!-- Content -->
  <div class="p-6 space-y-6">
    <!-- Header -->
    <div class="space-y-3">
      <div class="flex items-start justify-between gap-4">
        <div class="space-y-1 flex-1">
          <h3
            class="text-xl font-bold text-zinc-900 dark:text-white group-hover:text-violet-600 dark:group-hover:text-violet-400 transition-colors"
          >
            {project.title}
          </h3>
          <p class="text-violet-600 dark:text-violet-400 font-medium text-sm">
            {project.subtitle}
          </p>
        </div>

        <!-- Project Meta -->
        <div class="text-right space-y-1">
          <div
            class="flex items-center gap-1.5 text-xs text-zinc-500 dark:text-zinc-400"
          >
            <Calendar class="w-3 h-3" />
            <span>{formatDate(project.startDate)}</span>
            {project.endDate && <span>- {formatDate(project.endDate)}</span>}
          </div>
          {
            project.teamSize && (
              <div class="flex items-center gap-1.5 text-xs text-zinc-500 dark:text-zinc-400">
                <Users class="w-3 h-3" />
                <span>
                  {project.teamSize === 1
                    ? "Solo"
                    : `${project.teamSize} personas`}
                </span>
              </div>
            )
          }
        </div>
      </div>

      <p class="text-zinc-600 dark:text-zinc-300 leading-relaxed">
        {project.description}
      </p>
    </div>

    <!-- Problem & Solution -->
    <div class="space-y-4">
      <div
        class="p-4 bg-red-50 dark:bg-red-900/20 rounded-lg border border-red-200 dark:border-red-800"
      >
        <h4
          class="font-semibold text-red-800 dark:text-red-300 mb-2 text-sm flex items-center gap-2"
        >
          <Flag size="16" /> Problema
        </h4>
        <p class="text-red-700 dark:text-red-200 text-sm leading-relaxed">
          {project.problem}
        </p>
      </div>

      <div
        class="p-4 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-800"
      >
        <h4
          class="font-semibold text-green-800 dark:text-green-300 mb-2 text-sm flex items-center gap-2"
        >
          <Lightbulb size={16} /> Solución
        </h4>
        <p class="text-green-700 dark:text-green-200 text-sm leading-relaxed">
          {project.solution}
        </p>
      </div>
    </div>

    <!-- Tech Stack -->
    <div class="space-y-3">
      <h4
        class="font-semibold text-zinc-900 dark:text-white text-sm flex items-center gap-2"
      >
        <Hammer size="16" /> Stack Tecnológico
      </h4>
      <div class="flex flex-wrap gap-2">
        {
          project.techStack.map((tech) => (
            <div class="flex items-center gap-2 px-3 py-1.5 bg-zinc-100 dark:bg-zinc-700 rounded-lg border border-zinc-200 dark:border-zinc-600 hover:border-violet-300 dark:hover:border-violet-600 transition-colors group/tech">
              <img src={tech.icon} alt={`${tech.name} icon`} class="w-4 h-4" />
              <span class={`text-sm font-medium ${tech.color}`}>
                {tech.name}
              </span>
            </div>
          ))
        }
      </div>
    </div>

    <!-- Key Features -->
    <div class="space-y-3">
      <h4
        class="font-semibold text-zinc-900 dark:text-white text-sm flex items-center gap-2"
      >
        <Stars size="16" /> Características Clave
      </h4>
      <div class="grid grid-cols-1 gap-2">
        {
          project.features.slice(0, featured ? 6 : 4).map((feature) => (
            <div class="flex items-center gap-2 text-sm text-zinc-600 dark:text-zinc-300">
              <CheckCircle class="w-4 h-4 text-green-500 flex-shrink-0" />
              <span>{feature}</span>
            </div>
          ))
        }
        {
          project.features.length > (featured ? 6 : 4) && (
            <p class="text-xs text-zinc-500 dark:text-zinc-400 italic">
              +{project.features.length - (featured ? 6 : 4)} características
              más...
            </p>
          )
        }
      </div>
    </div>

    <!-- Metrics (if available) -->
    {
      project.metrics && project.metrics.length > 0 && (
        <div class="space-y-3">
          <h4 class="font-semibold text-zinc-900 dark:text-white text-sm flex items-center gap-2">
            <ChartNoAxesCombinedIcon size={16} /> Resultados
          </h4>
          <div class="grid grid-cols-2 gap-3">
            {project.metrics.map((metric) => (
              <div class="bg-violet-50 dark:bg-violet-900/20 rounded-lg p-3 border border-violet-200 dark:border-violet-800">
                <div class="text-lg font-bold text-violet-600 dark:text-violet-400">
                  {metric.value}
                </div>
                <div class="text-xs text-violet-700 dark:text-violet-300 font-medium">
                  {metric.label}
                </div>
                {metric.description && (
                  <div class="text-xs text-violet-600/70 dark:text-violet-400/70 mt-1">
                    {metric.description}
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
      )
    }

    <!-- Technical Challenges -->
    {
      featured && project.challenges.length > 0 && (
        <div class="space-y-3">
          <h4 class="font-semibold text-zinc-900 dark:text-white text-sm flex items-center gap-2">
            <Flame size={16} /> Desafíos Técnicos
          </h4>
          <div class="space-y-2">
            {project.challenges.slice(0, 3).map((challenge) => (
              <div class="flex items-start gap-2 text-sm text-zinc-600 dark:text-zinc-300">
                <Target class="w-4 h-4 text-orange-500 flex-shrink-0 mt-0.5" />
                <span>{challenge}</span>
              </div>
            ))}
          </div>
        </div>
      )
    }

    <!-- Actions -->
    <div class="pt-4 border-t border-zinc-200 dark:border-zinc-700">
      <div class="flex flex-wrap gap-3">
        {
          project.links.map((link) => {
            const LinkIcon = getLinkIcon(link.type);
            return (
              <Link
                href={link.url}
                variant="hoverEffect"
                class="flex-1 min-w-[120px] text-center"
              >
                <LinkIcon class="w-4 h-4 mr-2" />
                {link.label}
              </Link>
            );
          })
        }
      </div>
    </div>
  </div>
</article>
